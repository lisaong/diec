# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'os_version': 'str',
        'serial_number': 'str',
        'display_name': 'str',
        'client_id': 'str',
        'model_name': 'str',
        'model_id': 'str',
        'status': 'str',
        'group_id': 'str',
        'firmware_version': 'str',
        'bios_version': 'str',
        'jvm_version': 'str',
        'application_framework_version': 'str',
        'connection_interface': 'str',
        'connection_ip': 'str',
        'accept_encoding': 'str',
        'application_identifiers': 'str',
        'connection_id': 'str',
        'last_event_id': 'str',
        'imei': 'str',
        'imsi': 'str',
        'iccid': 'str',
        'osgi_framework_version': 'str',
        'custom_attribute1': 'str',
        'custom_attribute2': 'str',
        'custom_attribute3': 'str',
        'custom_attribute4': 'str',
        'custom_attribute5': 'str',
        'entity_attributes': 'dict(str, str)',
        'scope_id': 'str'
    }

    attribute_map = {
        'os_version': 'osVersion',
        'serial_number': 'serialNumber',
        'display_name': 'displayName',
        'client_id': 'clientId',
        'model_name': 'modelName',
        'model_id': 'modelId',
        'status': 'status',
        'group_id': 'groupId',
        'firmware_version': 'firmwareVersion',
        'bios_version': 'biosVersion',
        'jvm_version': 'jvmVersion',
        'application_framework_version': 'applicationFrameworkVersion',
        'connection_interface': 'connectionInterface',
        'connection_ip': 'connectionIp',
        'accept_encoding': 'acceptEncoding',
        'application_identifiers': 'applicationIdentifiers',
        'connection_id': 'connectionId',
        'last_event_id': 'lastEventId',
        'imei': 'imei',
        'imsi': 'imsi',
        'iccid': 'iccid',
        'osgi_framework_version': 'osgiFrameworkVersion',
        'custom_attribute1': 'customAttribute1',
        'custom_attribute2': 'customAttribute2',
        'custom_attribute3': 'customAttribute3',
        'custom_attribute4': 'customAttribute4',
        'custom_attribute5': 'customAttribute5',
        'entity_attributes': 'entityAttributes',
        'scope_id': 'scopeId'
    }

    def __init__(self, os_version=None, serial_number=None, display_name=None, client_id=None, model_name=None, model_id=None, status=None, group_id=None, firmware_version=None, bios_version=None, jvm_version=None, application_framework_version=None, connection_interface=None, connection_ip=None, accept_encoding=None, application_identifiers=None, connection_id=None, last_event_id=None, imei=None, imsi=None, iccid=None, osgi_framework_version=None, custom_attribute1=None, custom_attribute2=None, custom_attribute3=None, custom_attribute4=None, custom_attribute5=None, entity_attributes=None, scope_id=None):  # noqa: E501
        """DeviceCreator - a model defined in Swagger"""  # noqa: E501

        self._os_version = None
        self._serial_number = None
        self._display_name = None
        self._client_id = None
        self._model_name = None
        self._model_id = None
        self._status = None
        self._group_id = None
        self._firmware_version = None
        self._bios_version = None
        self._jvm_version = None
        self._application_framework_version = None
        self._connection_interface = None
        self._connection_ip = None
        self._accept_encoding = None
        self._application_identifiers = None
        self._connection_id = None
        self._last_event_id = None
        self._imei = None
        self._imsi = None
        self._iccid = None
        self._osgi_framework_version = None
        self._custom_attribute1 = None
        self._custom_attribute2 = None
        self._custom_attribute3 = None
        self._custom_attribute4 = None
        self._custom_attribute5 = None
        self._entity_attributes = None
        self._scope_id = None
        self.discriminator = None

        if os_version is not None:
            self.os_version = os_version
        if serial_number is not None:
            self.serial_number = serial_number
        if display_name is not None:
            self.display_name = display_name
        if client_id is not None:
            self.client_id = client_id
        if model_name is not None:
            self.model_name = model_name
        if model_id is not None:
            self.model_id = model_id
        if status is not None:
            self.status = status
        if group_id is not None:
            self.group_id = group_id
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if bios_version is not None:
            self.bios_version = bios_version
        if jvm_version is not None:
            self.jvm_version = jvm_version
        if application_framework_version is not None:
            self.application_framework_version = application_framework_version
        if connection_interface is not None:
            self.connection_interface = connection_interface
        if connection_ip is not None:
            self.connection_ip = connection_ip
        if accept_encoding is not None:
            self.accept_encoding = accept_encoding
        if application_identifiers is not None:
            self.application_identifiers = application_identifiers
        if connection_id is not None:
            self.connection_id = connection_id
        if last_event_id is not None:
            self.last_event_id = last_event_id
        if imei is not None:
            self.imei = imei
        if imsi is not None:
            self.imsi = imsi
        if iccid is not None:
            self.iccid = iccid
        if osgi_framework_version is not None:
            self.osgi_framework_version = osgi_framework_version
        if custom_attribute1 is not None:
            self.custom_attribute1 = custom_attribute1
        if custom_attribute2 is not None:
            self.custom_attribute2 = custom_attribute2
        if custom_attribute3 is not None:
            self.custom_attribute3 = custom_attribute3
        if custom_attribute4 is not None:
            self.custom_attribute4 = custom_attribute4
        if custom_attribute5 is not None:
            self.custom_attribute5 = custom_attribute5
        if entity_attributes is not None:
            self.entity_attributes = entity_attributes
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def os_version(self):
        """Gets the os_version of this DeviceCreator.  # noqa: E501


        :return: The os_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this DeviceCreator.


        :param os_version: The os_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceCreator.  # noqa: E501


        :return: The serial_number of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceCreator.


        :param serial_number: The serial_number of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def display_name(self):
        """Gets the display_name of this DeviceCreator.  # noqa: E501


        :return: The display_name of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DeviceCreator.


        :param display_name: The display_name of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def client_id(self):
        """Gets the client_id of this DeviceCreator.  # noqa: E501


        :return: The client_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DeviceCreator.


        :param client_id: The client_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def model_name(self):
        """Gets the model_name of this DeviceCreator.  # noqa: E501


        :return: The model_name of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this DeviceCreator.


        :param model_name: The model_name of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._model_name = model_name

    @property
    def model_id(self):
        """Gets the model_id of this DeviceCreator.  # noqa: E501


        :return: The model_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this DeviceCreator.


        :param model_id: The model_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def status(self):
        """Gets the status of this DeviceCreator.  # noqa: E501


        :return: The status of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeviceCreator.


        :param status: The status of this DeviceCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def group_id(self):
        """Gets the group_id of this DeviceCreator.  # noqa: E501


        :return: The group_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DeviceCreator.


        :param group_id: The group_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def firmware_version(self):
        """Gets the firmware_version of this DeviceCreator.  # noqa: E501


        :return: The firmware_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this DeviceCreator.


        :param firmware_version: The firmware_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def bios_version(self):
        """Gets the bios_version of this DeviceCreator.  # noqa: E501


        :return: The bios_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._bios_version

    @bios_version.setter
    def bios_version(self, bios_version):
        """Sets the bios_version of this DeviceCreator.


        :param bios_version: The bios_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._bios_version = bios_version

    @property
    def jvm_version(self):
        """Gets the jvm_version of this DeviceCreator.  # noqa: E501


        :return: The jvm_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._jvm_version

    @jvm_version.setter
    def jvm_version(self, jvm_version):
        """Sets the jvm_version of this DeviceCreator.


        :param jvm_version: The jvm_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._jvm_version = jvm_version

    @property
    def application_framework_version(self):
        """Gets the application_framework_version of this DeviceCreator.  # noqa: E501


        :return: The application_framework_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._application_framework_version

    @application_framework_version.setter
    def application_framework_version(self, application_framework_version):
        """Sets the application_framework_version of this DeviceCreator.


        :param application_framework_version: The application_framework_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._application_framework_version = application_framework_version

    @property
    def connection_interface(self):
        """Gets the connection_interface of this DeviceCreator.  # noqa: E501


        :return: The connection_interface of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._connection_interface

    @connection_interface.setter
    def connection_interface(self, connection_interface):
        """Sets the connection_interface of this DeviceCreator.


        :param connection_interface: The connection_interface of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._connection_interface = connection_interface

    @property
    def connection_ip(self):
        """Gets the connection_ip of this DeviceCreator.  # noqa: E501


        :return: The connection_ip of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._connection_ip

    @connection_ip.setter
    def connection_ip(self, connection_ip):
        """Sets the connection_ip of this DeviceCreator.


        :param connection_ip: The connection_ip of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._connection_ip = connection_ip

    @property
    def accept_encoding(self):
        """Gets the accept_encoding of this DeviceCreator.  # noqa: E501


        :return: The accept_encoding of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._accept_encoding

    @accept_encoding.setter
    def accept_encoding(self, accept_encoding):
        """Sets the accept_encoding of this DeviceCreator.


        :param accept_encoding: The accept_encoding of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._accept_encoding = accept_encoding

    @property
    def application_identifiers(self):
        """Gets the application_identifiers of this DeviceCreator.  # noqa: E501


        :return: The application_identifiers of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._application_identifiers

    @application_identifiers.setter
    def application_identifiers(self, application_identifiers):
        """Sets the application_identifiers of this DeviceCreator.


        :param application_identifiers: The application_identifiers of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._application_identifiers = application_identifiers

    @property
    def connection_id(self):
        """Gets the connection_id of this DeviceCreator.  # noqa: E501


        :return: The connection_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this DeviceCreator.


        :param connection_id: The connection_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def last_event_id(self):
        """Gets the last_event_id of this DeviceCreator.  # noqa: E501


        :return: The last_event_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._last_event_id

    @last_event_id.setter
    def last_event_id(self, last_event_id):
        """Sets the last_event_id of this DeviceCreator.


        :param last_event_id: The last_event_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._last_event_id = last_event_id

    @property
    def imei(self):
        """Gets the imei of this DeviceCreator.  # noqa: E501


        :return: The imei of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._imei

    @imei.setter
    def imei(self, imei):
        """Sets the imei of this DeviceCreator.


        :param imei: The imei of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._imei = imei

    @property
    def imsi(self):
        """Gets the imsi of this DeviceCreator.  # noqa: E501


        :return: The imsi of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._imsi

    @imsi.setter
    def imsi(self, imsi):
        """Sets the imsi of this DeviceCreator.


        :param imsi: The imsi of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._imsi = imsi

    @property
    def iccid(self):
        """Gets the iccid of this DeviceCreator.  # noqa: E501


        :return: The iccid of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._iccid

    @iccid.setter
    def iccid(self, iccid):
        """Sets the iccid of this DeviceCreator.


        :param iccid: The iccid of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._iccid = iccid

    @property
    def osgi_framework_version(self):
        """Gets the osgi_framework_version of this DeviceCreator.  # noqa: E501


        :return: The osgi_framework_version of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._osgi_framework_version

    @osgi_framework_version.setter
    def osgi_framework_version(self, osgi_framework_version):
        """Sets the osgi_framework_version of this DeviceCreator.


        :param osgi_framework_version: The osgi_framework_version of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._osgi_framework_version = osgi_framework_version

    @property
    def custom_attribute1(self):
        """Gets the custom_attribute1 of this DeviceCreator.  # noqa: E501


        :return: The custom_attribute1 of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute1

    @custom_attribute1.setter
    def custom_attribute1(self, custom_attribute1):
        """Sets the custom_attribute1 of this DeviceCreator.


        :param custom_attribute1: The custom_attribute1 of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._custom_attribute1 = custom_attribute1

    @property
    def custom_attribute2(self):
        """Gets the custom_attribute2 of this DeviceCreator.  # noqa: E501


        :return: The custom_attribute2 of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute2

    @custom_attribute2.setter
    def custom_attribute2(self, custom_attribute2):
        """Sets the custom_attribute2 of this DeviceCreator.


        :param custom_attribute2: The custom_attribute2 of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._custom_attribute2 = custom_attribute2

    @property
    def custom_attribute3(self):
        """Gets the custom_attribute3 of this DeviceCreator.  # noqa: E501


        :return: The custom_attribute3 of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute3

    @custom_attribute3.setter
    def custom_attribute3(self, custom_attribute3):
        """Sets the custom_attribute3 of this DeviceCreator.


        :param custom_attribute3: The custom_attribute3 of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._custom_attribute3 = custom_attribute3

    @property
    def custom_attribute4(self):
        """Gets the custom_attribute4 of this DeviceCreator.  # noqa: E501


        :return: The custom_attribute4 of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute4

    @custom_attribute4.setter
    def custom_attribute4(self, custom_attribute4):
        """Sets the custom_attribute4 of this DeviceCreator.


        :param custom_attribute4: The custom_attribute4 of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._custom_attribute4 = custom_attribute4

    @property
    def custom_attribute5(self):
        """Gets the custom_attribute5 of this DeviceCreator.  # noqa: E501


        :return: The custom_attribute5 of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._custom_attribute5

    @custom_attribute5.setter
    def custom_attribute5(self, custom_attribute5):
        """Sets the custom_attribute5 of this DeviceCreator.


        :param custom_attribute5: The custom_attribute5 of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._custom_attribute5 = custom_attribute5

    @property
    def entity_attributes(self):
        """Gets the entity_attributes of this DeviceCreator.  # noqa: E501


        :return: The entity_attributes of this DeviceCreator.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_attributes

    @entity_attributes.setter
    def entity_attributes(self, entity_attributes):
        """Sets the entity_attributes of this DeviceCreator.


        :param entity_attributes: The entity_attributes of this DeviceCreator.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_attributes = entity_attributes

    @property
    def scope_id(self):
        """Gets the scope_id of this DeviceCreator.  # noqa: E501


        :return: The scope_id of this DeviceCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this DeviceCreator.


        :param scope_id: The scope_id of this DeviceCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'expiration_date': 'datetime',
        'user_type': 'str',
        'external_id': 'str',
        'user_status': 'str',
        'name': 'str',
        'entity_attributes': 'dict(str, str)',
        'scope_id': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'expiration_date': 'expirationDate',
        'user_type': 'userType',
        'external_id': 'externalId',
        'user_status': 'userStatus',
        'name': 'name',
        'entity_attributes': 'entityAttributes',
        'scope_id': 'scopeId'
    }

    def __init__(self, display_name=None, email=None, phone_number=None, expiration_date=None, user_type=None, external_id=None, user_status=None, name=None, entity_attributes=None, scope_id=None):  # noqa: E501
        """UserCreator - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._email = None
        self._phone_number = None
        self._expiration_date = None
        self._user_type = None
        self._external_id = None
        self._user_status = None
        self._name = None
        self._entity_attributes = None
        self._scope_id = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if user_type is not None:
            self.user_type = user_type
        if external_id is not None:
            self.external_id = external_id
        if user_status is not None:
            self.user_status = user_status
        if name is not None:
            self.name = name
        if entity_attributes is not None:
            self.entity_attributes = entity_attributes
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def display_name(self):
        """Gets the display_name of this UserCreator.  # noqa: E501


        :return: The display_name of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserCreator.


        :param display_name: The display_name of this UserCreator.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserCreator.  # noqa: E501


        :return: The email of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreator.


        :param email: The email of this UserCreator.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this UserCreator.  # noqa: E501


        :return: The phone_number of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserCreator.


        :param phone_number: The phone_number of this UserCreator.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def expiration_date(self):
        """Gets the expiration_date of this UserCreator.  # noqa: E501


        :return: The expiration_date of this UserCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UserCreator.


        :param expiration_date: The expiration_date of this UserCreator.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def user_type(self):
        """Gets the user_type of this UserCreator.  # noqa: E501


        :return: The user_type of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserCreator.


        :param user_type: The user_type of this UserCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEVICE", "INTERNAL", "EXTERNAL"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"  # noqa: E501
                .format(user_type, allowed_values)
            )

        self._user_type = user_type

    @property
    def external_id(self):
        """Gets the external_id of this UserCreator.  # noqa: E501


        :return: The external_id of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this UserCreator.


        :param external_id: The external_id of this UserCreator.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def user_status(self):
        """Gets the user_status of this UserCreator.  # noqa: E501


        :return: The user_status of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._user_status

    @user_status.setter
    def user_status(self, user_status):
        """Sets the user_status of this UserCreator.


        :param user_status: The user_status of this UserCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if user_status not in allowed_values:
            raise ValueError(
                "Invalid value for `user_status` ({0}), must be one of {1}"  # noqa: E501
                .format(user_status, allowed_values)
            )

        self._user_status = user_status

    @property
    def name(self):
        """Gets the name of this UserCreator.  # noqa: E501


        :return: The name of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCreator.


        :param name: The name of this UserCreator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def entity_attributes(self):
        """Gets the entity_attributes of this UserCreator.  # noqa: E501


        :return: The entity_attributes of this UserCreator.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_attributes

    @entity_attributes.setter
    def entity_attributes(self, entity_attributes):
        """Sets the entity_attributes of this UserCreator.


        :param entity_attributes: The entity_attributes of this UserCreator.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_attributes = entity_attributes

    @property
    def scope_id(self):
        """Gets the scope_id of this UserCreator.  # noqa: E501


        :return: The scope_id of this UserCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this UserCreator.


        :param scope_id: The scope_id of this UserCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Permission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'domain': 'str',
        'group_id': 'str',
        'action': 'str',
        'target_scope_id': 'str',
        'forwardable': 'bool'
    }

    attribute_map = {
        'domain': 'domain',
        'group_id': 'groupId',
        'action': 'action',
        'target_scope_id': 'targetScopeId',
        'forwardable': 'forwardable'
    }

    def __init__(self, domain=None, group_id=None, action=None, target_scope_id=None, forwardable=None):  # noqa: E501
        """Permission - a model defined in Swagger"""  # noqa: E501

        self._domain = None
        self._group_id = None
        self._action = None
        self._target_scope_id = None
        self._forwardable = None
        self.discriminator = None

        if domain is not None:
            self.domain = domain
        if group_id is not None:
            self.group_id = group_id
        if action is not None:
            self.action = action
        if target_scope_id is not None:
            self.target_scope_id = target_scope_id
        if forwardable is not None:
            self.forwardable = forwardable

    @property
    def domain(self):
        """Gets the domain of this Permission.  # noqa: E501


        :return: The domain of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Permission.


        :param domain: The domain of this Permission.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def group_id(self):
        """Gets the group_id of this Permission.  # noqa: E501


        :return: The group_id of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Permission.


        :param group_id: The group_id of this Permission.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def action(self):
        """Gets the action of this Permission.  # noqa: E501


        :return: The action of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Permission.


        :param action: The action of this Permission.  # noqa: E501
        :type: str
        """
        allowed_values = ["read", "write", "delete", "connect", "execute"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def target_scope_id(self):
        """Gets the target_scope_id of this Permission.  # noqa: E501


        :return: The target_scope_id of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._target_scope_id

    @target_scope_id.setter
    def target_scope_id(self, target_scope_id):
        """Sets the target_scope_id of this Permission.


        :param target_scope_id: The target_scope_id of this Permission.  # noqa: E501
        :type: str
        """

        self._target_scope_id = target_scope_id

    @property
    def forwardable(self):
        """Gets the forwardable of this Permission.  # noqa: E501


        :return: The forwardable of this Permission.  # noqa: E501
        :rtype: bool
        """
        return self._forwardable

    @forwardable.setter
    def forwardable(self, forwardable):
        """Sets the forwardable of this Permission.


        :param forwardable: The forwardable of this Permission.  # noqa: E501
        :type: bool
        """

        self._forwardable = forwardable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Permission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.permission import Permission  # noqa: F401,E501


class AccessInfoCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permissions': 'list[Permission]',
        'user_id': 'str',
        'role_ids': 'str',
        'scope_id': 'str'
    }

    attribute_map = {
        'permissions': 'permissions',
        'user_id': 'userId',
        'role_ids': 'roleIds',
        'scope_id': 'scopeId'
    }

    def __init__(self, permissions=None, user_id=None, role_ids=None, scope_id=None):  # noqa: E501
        """AccessInfoCreator - a model defined in Swagger"""  # noqa: E501

        self._permissions = None
        self._user_id = None
        self._role_ids = None
        self._scope_id = None
        self.discriminator = None

        if permissions is not None:
            self.permissions = permissions
        if user_id is not None:
            self.user_id = user_id
        if role_ids is not None:
            self.role_ids = role_ids
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def permissions(self):
        """Gets the permissions of this AccessInfoCreator.  # noqa: E501


        :return: The permissions of this AccessInfoCreator.  # noqa: E501
        :rtype: list[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AccessInfoCreator.


        :param permissions: The permissions of this AccessInfoCreator.  # noqa: E501
        :type: list[Permission]
        """

        self._permissions = permissions

    @property
    def user_id(self):
        """Gets the user_id of this AccessInfoCreator.  # noqa: E501


        :return: The user_id of this AccessInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessInfoCreator.


        :param user_id: The user_id of this AccessInfoCreator.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def role_ids(self):
        """Gets the role_ids of this AccessInfoCreator.  # noqa: E501


        :return: The role_ids of this AccessInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this AccessInfoCreator.


        :param role_ids: The role_ids of this AccessInfoCreator.  # noqa: E501
        :type: str
        """

        self._role_ids = role_ids

    @property
    def scope_id(self):
        """Gets the scope_id of this AccessInfoCreator.  # noqa: E501


        :return: The scope_id of this AccessInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this AccessInfoCreator.


        :param scope_id: The scope_id of this AccessInfoCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessInfoCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessInfoCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

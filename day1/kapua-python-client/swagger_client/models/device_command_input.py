# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceCommandInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment': 'list[str]',
        'timeout': 'int',
        'body': 'list[str]',
        'password': 'str',
        'arguments': 'list[str]',
        'command': 'str',
        'working_dir': 'str',
        'run_asynch': 'bool',
        'stdin': 'str',
        'scope_id': 'str',
        'id': 'str',
        'created_on': 'datetime',
        'created_by': 'str',
        'type': 'str'
    }

    attribute_map = {
        'environment': 'environment',
        'timeout': 'timeout',
        'body': 'body',
        'password': 'password',
        'arguments': 'arguments',
        'command': 'command',
        'working_dir': 'workingDir',
        'run_asynch': 'runAsynch',
        'stdin': 'stdin',
        'scope_id': 'scopeId',
        'id': 'id',
        'created_on': 'createdOn',
        'created_by': 'createdBy',
        'type': 'type'
    }

    def __init__(self, environment=None, timeout=None, body=None, password=None, arguments=None, command=None, working_dir=None, run_asynch=None, stdin=None, scope_id=None, id=None, created_on=None, created_by=None, type=None):  # noqa: E501
        """DeviceCommandInput - a model defined in Swagger"""  # noqa: E501

        self._environment = None
        self._timeout = None
        self._body = None
        self._password = None
        self._arguments = None
        self._command = None
        self._working_dir = None
        self._run_asynch = None
        self._stdin = None
        self._scope_id = None
        self._id = None
        self._created_on = None
        self._created_by = None
        self._type = None
        self.discriminator = None

        if environment is not None:
            self.environment = environment
        if timeout is not None:
            self.timeout = timeout
        if body is not None:
            self.body = body
        if password is not None:
            self.password = password
        if arguments is not None:
            self.arguments = arguments
        if command is not None:
            self.command = command
        if working_dir is not None:
            self.working_dir = working_dir
        if run_asynch is not None:
            self.run_asynch = run_asynch
        if stdin is not None:
            self.stdin = stdin
        if scope_id is not None:
            self.scope_id = scope_id
        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by
        if type is not None:
            self.type = type

    @property
    def environment(self):
        """Gets the environment of this DeviceCommandInput.  # noqa: E501


        :return: The environment of this DeviceCommandInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this DeviceCommandInput.


        :param environment: The environment of this DeviceCommandInput.  # noqa: E501
        :type: list[str]
        """

        self._environment = environment

    @property
    def timeout(self):
        """Gets the timeout of this DeviceCommandInput.  # noqa: E501


        :return: The timeout of this DeviceCommandInput.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this DeviceCommandInput.


        :param timeout: The timeout of this DeviceCommandInput.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def body(self):
        """Gets the body of this DeviceCommandInput.  # noqa: E501


        :return: The body of this DeviceCommandInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this DeviceCommandInput.


        :param body: The body of this DeviceCommandInput.  # noqa: E501
        :type: list[str]
        """

        self._body = body

    @property
    def password(self):
        """Gets the password of this DeviceCommandInput.  # noqa: E501


        :return: The password of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DeviceCommandInput.


        :param password: The password of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def arguments(self):
        """Gets the arguments of this DeviceCommandInput.  # noqa: E501


        :return: The arguments of this DeviceCommandInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this DeviceCommandInput.


        :param arguments: The arguments of this DeviceCommandInput.  # noqa: E501
        :type: list[str]
        """

        self._arguments = arguments

    @property
    def command(self):
        """Gets the command of this DeviceCommandInput.  # noqa: E501


        :return: The command of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this DeviceCommandInput.


        :param command: The command of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def working_dir(self):
        """Gets the working_dir of this DeviceCommandInput.  # noqa: E501


        :return: The working_dir of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this DeviceCommandInput.


        :param working_dir: The working_dir of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._working_dir = working_dir

    @property
    def run_asynch(self):
        """Gets the run_asynch of this DeviceCommandInput.  # noqa: E501


        :return: The run_asynch of this DeviceCommandInput.  # noqa: E501
        :rtype: bool
        """
        return self._run_asynch

    @run_asynch.setter
    def run_asynch(self, run_asynch):
        """Sets the run_asynch of this DeviceCommandInput.


        :param run_asynch: The run_asynch of this DeviceCommandInput.  # noqa: E501
        :type: bool
        """

        self._run_asynch = run_asynch

    @property
    def stdin(self):
        """Gets the stdin of this DeviceCommandInput.  # noqa: E501


        :return: The stdin of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._stdin

    @stdin.setter
    def stdin(self, stdin):
        """Sets the stdin of this DeviceCommandInput.


        :param stdin: The stdin of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._stdin = stdin

    @property
    def scope_id(self):
        """Gets the scope_id of this DeviceCommandInput.  # noqa: E501


        :return: The scope_id of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this DeviceCommandInput.


        :param scope_id: The scope_id of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    @property
    def id(self):
        """Gets the id of this DeviceCommandInput.  # noqa: E501


        :return: The id of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceCommandInput.


        :param id: The id of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this DeviceCommandInput.  # noqa: E501


        :return: The created_on of this DeviceCommandInput.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DeviceCommandInput.


        :param created_on: The created_on of this DeviceCommandInput.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this DeviceCommandInput.  # noqa: E501


        :return: The created_by of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DeviceCommandInput.


        :param created_by: The created_by of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def type(self):
        """Gets the type of this DeviceCommandInput.  # noqa: E501


        :return: The type of this DeviceCommandInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeviceCommandInput.


        :param type: The type of this DeviceCommandInput.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCommandInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCommandInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

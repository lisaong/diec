# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceCommandOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exception_message': 'str',
        'exception_stack': 'str',
        'stderr': 'str',
        'stdout': 'str',
        'exit_code': 'int',
        'has_timedout': 'bool'
    }

    attribute_map = {
        'exception_message': 'exceptionMessage',
        'exception_stack': 'exceptionStack',
        'stderr': 'stderr',
        'stdout': 'stdout',
        'exit_code': 'exitCode',
        'has_timedout': 'hasTimedout'
    }

    def __init__(self, exception_message=None, exception_stack=None, stderr=None, stdout=None, exit_code=None, has_timedout=None):  # noqa: E501
        """DeviceCommandOutput - a model defined in Swagger"""  # noqa: E501

        self._exception_message = None
        self._exception_stack = None
        self._stderr = None
        self._stdout = None
        self._exit_code = None
        self._has_timedout = None
        self.discriminator = None

        if exception_message is not None:
            self.exception_message = exception_message
        if exception_stack is not None:
            self.exception_stack = exception_stack
        if stderr is not None:
            self.stderr = stderr
        if stdout is not None:
            self.stdout = stdout
        if exit_code is not None:
            self.exit_code = exit_code
        if has_timedout is not None:
            self.has_timedout = has_timedout

    @property
    def exception_message(self):
        """Gets the exception_message of this DeviceCommandOutput.  # noqa: E501


        :return: The exception_message of this DeviceCommandOutput.  # noqa: E501
        :rtype: str
        """
        return self._exception_message

    @exception_message.setter
    def exception_message(self, exception_message):
        """Sets the exception_message of this DeviceCommandOutput.


        :param exception_message: The exception_message of this DeviceCommandOutput.  # noqa: E501
        :type: str
        """

        self._exception_message = exception_message

    @property
    def exception_stack(self):
        """Gets the exception_stack of this DeviceCommandOutput.  # noqa: E501


        :return: The exception_stack of this DeviceCommandOutput.  # noqa: E501
        :rtype: str
        """
        return self._exception_stack

    @exception_stack.setter
    def exception_stack(self, exception_stack):
        """Sets the exception_stack of this DeviceCommandOutput.


        :param exception_stack: The exception_stack of this DeviceCommandOutput.  # noqa: E501
        :type: str
        """

        self._exception_stack = exception_stack

    @property
    def stderr(self):
        """Gets the stderr of this DeviceCommandOutput.  # noqa: E501


        :return: The stderr of this DeviceCommandOutput.  # noqa: E501
        :rtype: str
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this DeviceCommandOutput.


        :param stderr: The stderr of this DeviceCommandOutput.  # noqa: E501
        :type: str
        """

        self._stderr = stderr

    @property
    def stdout(self):
        """Gets the stdout of this DeviceCommandOutput.  # noqa: E501


        :return: The stdout of this DeviceCommandOutput.  # noqa: E501
        :rtype: str
        """
        return self._stdout

    @stdout.setter
    def stdout(self, stdout):
        """Sets the stdout of this DeviceCommandOutput.


        :param stdout: The stdout of this DeviceCommandOutput.  # noqa: E501
        :type: str
        """

        self._stdout = stdout

    @property
    def exit_code(self):
        """Gets the exit_code of this DeviceCommandOutput.  # noqa: E501


        :return: The exit_code of this DeviceCommandOutput.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this DeviceCommandOutput.


        :param exit_code: The exit_code of this DeviceCommandOutput.  # noqa: E501
        :type: int
        """

        self._exit_code = exit_code

    @property
    def has_timedout(self):
        """Gets the has_timedout of this DeviceCommandOutput.  # noqa: E501


        :return: The has_timedout of this DeviceCommandOutput.  # noqa: E501
        :rtype: bool
        """
        return self._has_timedout

    @has_timedout.setter
    def has_timedout(self, has_timedout):
        """Sets the has_timedout of this DeviceCommandOutput.


        :param has_timedout: The has_timedout of this DeviceCommandOutput.  # noqa: E501
        :type: bool
        """

        self._has_timedout = has_timedout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceCommandOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceCommandOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

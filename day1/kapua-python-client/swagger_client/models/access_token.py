# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccessToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'token_id': 'str',
        'expires_on': 'datetime',
        'refresh_token': 'str',
        'refresh_expires_on': 'datetime',
        'invalidated_on': 'datetime',
        'type': 'str',
        'modified_on': 'datetime',
        'modified_by': 'str',
        'optlock': 'int',
        'entity_attributes': 'dict(str, str)',
        'entity_properties': 'dict(str, str)',
        'scope_id': 'str',
        'id': 'str',
        'created_on': 'datetime',
        'created_by': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'token_id': 'tokenId',
        'expires_on': 'expiresOn',
        'refresh_token': 'refreshToken',
        'refresh_expires_on': 'refreshExpiresOn',
        'invalidated_on': 'invalidatedOn',
        'type': 'type',
        'modified_on': 'modifiedOn',
        'modified_by': 'modifiedBy',
        'optlock': 'optlock',
        'entity_attributes': 'entityAttributes',
        'entity_properties': 'entityProperties',
        'scope_id': 'scopeId',
        'id': 'id',
        'created_on': 'createdOn',
        'created_by': 'createdBy'
    }

    def __init__(self, user_id=None, token_id=None, expires_on=None, refresh_token=None, refresh_expires_on=None, invalidated_on=None, type=None, modified_on=None, modified_by=None, optlock=None, entity_attributes=None, entity_properties=None, scope_id=None, id=None, created_on=None, created_by=None):  # noqa: E501
        """AccessToken - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._token_id = None
        self._expires_on = None
        self._refresh_token = None
        self._refresh_expires_on = None
        self._invalidated_on = None
        self._type = None
        self._modified_on = None
        self._modified_by = None
        self._optlock = None
        self._entity_attributes = None
        self._entity_properties = None
        self._scope_id = None
        self._id = None
        self._created_on = None
        self._created_by = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if token_id is not None:
            self.token_id = token_id
        if expires_on is not None:
            self.expires_on = expires_on
        if refresh_token is not None:
            self.refresh_token = refresh_token
        if refresh_expires_on is not None:
            self.refresh_expires_on = refresh_expires_on
        if invalidated_on is not None:
            self.invalidated_on = invalidated_on
        if type is not None:
            self.type = type
        if modified_on is not None:
            self.modified_on = modified_on
        if modified_by is not None:
            self.modified_by = modified_by
        if optlock is not None:
            self.optlock = optlock
        if entity_attributes is not None:
            self.entity_attributes = entity_attributes
        if entity_properties is not None:
            self.entity_properties = entity_properties
        if scope_id is not None:
            self.scope_id = scope_id
        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if created_by is not None:
            self.created_by = created_by

    @property
    def user_id(self):
        """Gets the user_id of this AccessToken.  # noqa: E501


        :return: The user_id of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessToken.


        :param user_id: The user_id of this AccessToken.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def token_id(self):
        """Gets the token_id of this AccessToken.  # noqa: E501


        :return: The token_id of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this AccessToken.


        :param token_id: The token_id of this AccessToken.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def expires_on(self):
        """Gets the expires_on of this AccessToken.  # noqa: E501


        :return: The expires_on of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this AccessToken.


        :param expires_on: The expires_on of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def refresh_token(self):
        """Gets the refresh_token of this AccessToken.  # noqa: E501


        :return: The refresh_token of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this AccessToken.


        :param refresh_token: The refresh_token of this AccessToken.  # noqa: E501
        :type: str
        """

        self._refresh_token = refresh_token

    @property
    def refresh_expires_on(self):
        """Gets the refresh_expires_on of this AccessToken.  # noqa: E501


        :return: The refresh_expires_on of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._refresh_expires_on

    @refresh_expires_on.setter
    def refresh_expires_on(self, refresh_expires_on):
        """Sets the refresh_expires_on of this AccessToken.


        :param refresh_expires_on: The refresh_expires_on of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._refresh_expires_on = refresh_expires_on

    @property
    def invalidated_on(self):
        """Gets the invalidated_on of this AccessToken.  # noqa: E501


        :return: The invalidated_on of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._invalidated_on

    @invalidated_on.setter
    def invalidated_on(self, invalidated_on):
        """Sets the invalidated_on of this AccessToken.


        :param invalidated_on: The invalidated_on of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._invalidated_on = invalidated_on

    @property
    def type(self):
        """Gets the type of this AccessToken.  # noqa: E501


        :return: The type of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccessToken.


        :param type: The type of this AccessToken.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def modified_on(self):
        """Gets the modified_on of this AccessToken.  # noqa: E501


        :return: The modified_on of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this AccessToken.


        :param modified_on: The modified_on of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._modified_on = modified_on

    @property
    def modified_by(self):
        """Gets the modified_by of this AccessToken.  # noqa: E501


        :return: The modified_by of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AccessToken.


        :param modified_by: The modified_by of this AccessToken.  # noqa: E501
        :type: str
        """

        self._modified_by = modified_by

    @property
    def optlock(self):
        """Gets the optlock of this AccessToken.  # noqa: E501


        :return: The optlock of this AccessToken.  # noqa: E501
        :rtype: int
        """
        return self._optlock

    @optlock.setter
    def optlock(self, optlock):
        """Sets the optlock of this AccessToken.


        :param optlock: The optlock of this AccessToken.  # noqa: E501
        :type: int
        """

        self._optlock = optlock

    @property
    def entity_attributes(self):
        """Gets the entity_attributes of this AccessToken.  # noqa: E501


        :return: The entity_attributes of this AccessToken.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_attributes

    @entity_attributes.setter
    def entity_attributes(self, entity_attributes):
        """Sets the entity_attributes of this AccessToken.


        :param entity_attributes: The entity_attributes of this AccessToken.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_attributes = entity_attributes

    @property
    def entity_properties(self):
        """Gets the entity_properties of this AccessToken.  # noqa: E501


        :return: The entity_properties of this AccessToken.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_properties

    @entity_properties.setter
    def entity_properties(self, entity_properties):
        """Sets the entity_properties of this AccessToken.


        :param entity_properties: The entity_properties of this AccessToken.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_properties = entity_properties

    @property
    def scope_id(self):
        """Gets the scope_id of this AccessToken.  # noqa: E501


        :return: The scope_id of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this AccessToken.


        :param scope_id: The scope_id of this AccessToken.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    @property
    def id(self):
        """Gets the id of this AccessToken.  # noqa: E501


        :return: The id of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessToken.


        :param id: The id of this AccessToken.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this AccessToken.  # noqa: E501


        :return: The created_on of this AccessToken.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AccessToken.


        :param created_on: The created_on of this AccessToken.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def created_by(self):
        """Gets the created_by of this AccessToken.  # noqa: E501


        :return: The created_by of this AccessToken.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this AccessToken.


        :param created_by: The created_by of this AccessToken.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccessToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

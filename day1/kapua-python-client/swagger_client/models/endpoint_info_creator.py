# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.endpoint_usage import EndpointUsage  # noqa: F401,E501


class EndpointInfoCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schema': 'str',
        'port': 'int',
        'secure': 'bool',
        'dns': 'str',
        'usages': 'list[EndpointUsage]',
        'scope_id': 'str'
    }

    attribute_map = {
        'schema': 'schema',
        'port': 'port',
        'secure': 'secure',
        'dns': 'dns',
        'usages': 'usages',
        'scope_id': 'scopeId'
    }

    def __init__(self, schema=None, port=None, secure=None, dns=None, usages=None, scope_id=None):  # noqa: E501
        """EndpointInfoCreator - a model defined in Swagger"""  # noqa: E501

        self._schema = None
        self._port = None
        self._secure = None
        self._dns = None
        self._usages = None
        self._scope_id = None
        self.discriminator = None

        if schema is not None:
            self.schema = schema
        if port is not None:
            self.port = port
        if secure is not None:
            self.secure = secure
        if dns is not None:
            self.dns = dns
        if usages is not None:
            self.usages = usages
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def schema(self):
        """Gets the schema of this EndpointInfoCreator.  # noqa: E501


        :return: The schema of this EndpointInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this EndpointInfoCreator.


        :param schema: The schema of this EndpointInfoCreator.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def port(self):
        """Gets the port of this EndpointInfoCreator.  # noqa: E501


        :return: The port of this EndpointInfoCreator.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this EndpointInfoCreator.


        :param port: The port of this EndpointInfoCreator.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def secure(self):
        """Gets the secure of this EndpointInfoCreator.  # noqa: E501


        :return: The secure of this EndpointInfoCreator.  # noqa: E501
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """Sets the secure of this EndpointInfoCreator.


        :param secure: The secure of this EndpointInfoCreator.  # noqa: E501
        :type: bool
        """

        self._secure = secure

    @property
    def dns(self):
        """Gets the dns of this EndpointInfoCreator.  # noqa: E501


        :return: The dns of this EndpointInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._dns

    @dns.setter
    def dns(self, dns):
        """Sets the dns of this EndpointInfoCreator.


        :param dns: The dns of this EndpointInfoCreator.  # noqa: E501
        :type: str
        """

        self._dns = dns

    @property
    def usages(self):
        """Gets the usages of this EndpointInfoCreator.  # noqa: E501


        :return: The usages of this EndpointInfoCreator.  # noqa: E501
        :rtype: list[EndpointUsage]
        """
        return self._usages

    @usages.setter
    def usages(self, usages):
        """Sets the usages of this EndpointInfoCreator.


        :param usages: The usages of this EndpointInfoCreator.  # noqa: E501
        :type: list[EndpointUsage]
        """

        self._usages = usages

    @property
    def scope_id(self):
        """Gets the scope_id of this EndpointInfoCreator.  # noqa: E501


        :return: The scope_id of this EndpointInfoCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this EndpointInfoCreator.


        :param scope_id: The scope_id of this EndpointInfoCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointInfoCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointInfoCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CredentialCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'expiration_date': 'datetime',
        'credential_type': 'str',
        'credential_status': 'str',
        'credential_key': 'str',
        'scope_id': 'str'
    }

    attribute_map = {
        'user_id': 'userId',
        'expiration_date': 'expirationDate',
        'credential_type': 'credentialType',
        'credential_status': 'credentialStatus',
        'credential_key': 'credentialKey',
        'scope_id': 'scopeId'
    }

    def __init__(self, user_id=None, expiration_date=None, credential_type=None, credential_status=None, credential_key=None, scope_id=None):  # noqa: E501
        """CredentialCreator - a model defined in Swagger"""  # noqa: E501

        self._user_id = None
        self._expiration_date = None
        self._credential_type = None
        self._credential_status = None
        self._credential_key = None
        self._scope_id = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if credential_type is not None:
            self.credential_type = credential_type
        if credential_status is not None:
            self.credential_status = credential_status
        if credential_key is not None:
            self.credential_key = credential_key
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def user_id(self):
        """Gets the user_id of this CredentialCreator.  # noqa: E501


        :return: The user_id of this CredentialCreator.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CredentialCreator.


        :param user_id: The user_id of this CredentialCreator.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CredentialCreator.  # noqa: E501


        :return: The expiration_date of this CredentialCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CredentialCreator.


        :param expiration_date: The expiration_date of this CredentialCreator.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def credential_type(self):
        """Gets the credential_type of this CredentialCreator.  # noqa: E501


        :return: The credential_type of this CredentialCreator.  # noqa: E501
        :rtype: str
        """
        return self._credential_type

    @credential_type.setter
    def credential_type(self, credential_type):
        """Sets the credential_type of this CredentialCreator.


        :param credential_type: The credential_type of this CredentialCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASSWORD", "API_KEY", "JWT"]  # noqa: E501
        if credential_type not in allowed_values:
            raise ValueError(
                "Invalid value for `credential_type` ({0}), must be one of {1}"  # noqa: E501
                .format(credential_type, allowed_values)
            )

        self._credential_type = credential_type

    @property
    def credential_status(self):
        """Gets the credential_status of this CredentialCreator.  # noqa: E501


        :return: The credential_status of this CredentialCreator.  # noqa: E501
        :rtype: str
        """
        return self._credential_status

    @credential_status.setter
    def credential_status(self, credential_status):
        """Sets the credential_status of this CredentialCreator.


        :param credential_status: The credential_status of this CredentialCreator.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if credential_status not in allowed_values:
            raise ValueError(
                "Invalid value for `credential_status` ({0}), must be one of {1}"  # noqa: E501
                .format(credential_status, allowed_values)
            )

        self._credential_status = credential_status

    @property
    def credential_key(self):
        """Gets the credential_key of this CredentialCreator.  # noqa: E501


        :return: The credential_key of this CredentialCreator.  # noqa: E501
        :rtype: str
        """
        return self._credential_key

    @credential_key.setter
    def credential_key(self, credential_key):
        """Sets the credential_key of this CredentialCreator.


        :param credential_key: The credential_key of this CredentialCreator.  # noqa: E501
        :type: str
        """

        self._credential_key = credential_key

    @property
    def scope_id(self):
        """Gets the scope_id of this CredentialCreator.  # noqa: E501


        :return: The scope_id of this CredentialCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this CredentialCreator.


        :param scope_id: The scope_id of this CredentialCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

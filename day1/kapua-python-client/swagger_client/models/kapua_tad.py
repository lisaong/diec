# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.kapua_toption import KapuaToption  # noqa: F401,E501
from swagger_client.models.kapua_tscalar import KapuaTscalar  # noqa: F401,E501


class KapuaTad(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'KapuaTscalar',
        'option': 'list[KapuaToption]',
        'default': 'str',
        'min': 'str',
        'max': 'str',
        'description': 'str',
        'id': 'str',
        'cardinality': 'int',
        'other_attributes': 'dict(str, str)',
        'any': 'list[object]',
        'required': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'type': 'type',
        'option': 'option',
        'default': 'default',
        'min': 'min',
        'max': 'max',
        'description': 'description',
        'id': 'id',
        'cardinality': 'cardinality',
        'other_attributes': 'otherAttributes',
        'any': 'any',
        'required': 'required',
        'name': 'name'
    }

    def __init__(self, type=None, option=None, default=None, min=None, max=None, description=None, id=None, cardinality=None, other_attributes=None, any=None, required=None, name=None):  # noqa: E501
        """KapuaTad - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._option = None
        self._default = None
        self._min = None
        self._max = None
        self._description = None
        self._id = None
        self._cardinality = None
        self._other_attributes = None
        self._any = None
        self._required = None
        self._name = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if option is not None:
            self.option = option
        if default is not None:
            self.default = default
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if cardinality is not None:
            self.cardinality = cardinality
        if other_attributes is not None:
            self.other_attributes = other_attributes
        if any is not None:
            self.any = any
        if required is not None:
            self.required = required
        if name is not None:
            self.name = name

    @property
    def type(self):
        """Gets the type of this KapuaTad.  # noqa: E501


        :return: The type of this KapuaTad.  # noqa: E501
        :rtype: KapuaTscalar
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KapuaTad.


        :param type: The type of this KapuaTad.  # noqa: E501
        :type: KapuaTscalar
        """

        self._type = type

    @property
    def option(self):
        """Gets the option of this KapuaTad.  # noqa: E501


        :return: The option of this KapuaTad.  # noqa: E501
        :rtype: list[KapuaToption]
        """
        return self._option

    @option.setter
    def option(self, option):
        """Sets the option of this KapuaTad.


        :param option: The option of this KapuaTad.  # noqa: E501
        :type: list[KapuaToption]
        """

        self._option = option

    @property
    def default(self):
        """Gets the default of this KapuaTad.  # noqa: E501


        :return: The default of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this KapuaTad.


        :param default: The default of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def min(self):
        """Gets the min of this KapuaTad.  # noqa: E501


        :return: The min of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this KapuaTad.


        :param min: The min of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this KapuaTad.  # noqa: E501


        :return: The max of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this KapuaTad.


        :param max: The max of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._max = max

    @property
    def description(self):
        """Gets the description of this KapuaTad.  # noqa: E501


        :return: The description of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this KapuaTad.


        :param description: The description of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this KapuaTad.  # noqa: E501


        :return: The id of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KapuaTad.


        :param id: The id of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def cardinality(self):
        """Gets the cardinality of this KapuaTad.  # noqa: E501


        :return: The cardinality of this KapuaTad.  # noqa: E501
        :rtype: int
        """
        return self._cardinality

    @cardinality.setter
    def cardinality(self, cardinality):
        """Sets the cardinality of this KapuaTad.


        :param cardinality: The cardinality of this KapuaTad.  # noqa: E501
        :type: int
        """

        self._cardinality = cardinality

    @property
    def other_attributes(self):
        """Gets the other_attributes of this KapuaTad.  # noqa: E501


        :return: The other_attributes of this KapuaTad.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._other_attributes

    @other_attributes.setter
    def other_attributes(self, other_attributes):
        """Sets the other_attributes of this KapuaTad.


        :param other_attributes: The other_attributes of this KapuaTad.  # noqa: E501
        :type: dict(str, str)
        """

        self._other_attributes = other_attributes

    @property
    def any(self):
        """Gets the any of this KapuaTad.  # noqa: E501


        :return: The any of this KapuaTad.  # noqa: E501
        :rtype: list[object]
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this KapuaTad.


        :param any: The any of this KapuaTad.  # noqa: E501
        :type: list[object]
        """

        self._any = any

    @property
    def required(self):
        """Gets the required of this KapuaTad.  # noqa: E501


        :return: The required of this KapuaTad.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this KapuaTad.


        :param required: The required of this KapuaTad.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def name(self):
        """Gets the name of this KapuaTad.  # noqa: E501


        :return: The name of this KapuaTad.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KapuaTad.


        :param name: The name of this KapuaTad.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KapuaTad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KapuaTad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

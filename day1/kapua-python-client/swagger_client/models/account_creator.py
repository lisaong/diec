# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountCreator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_address_line1': 'str',
        'organization_address_line2': 'str',
        'organization_city': 'str',
        'organization_zip_post_code': 'str',
        'organization_state_province_county': 'str',
        'organization_country': 'str',
        'expiration_date': 'datetime',
        'organization_name': 'str',
        'organization_person_name': 'str',
        'organization_email': 'str',
        'organization_phone_number': 'str',
        'name': 'str',
        'entity_attributes': 'dict(str, str)',
        'scope_id': 'str'
    }

    attribute_map = {
        'organization_address_line1': 'organizationAddressLine1',
        'organization_address_line2': 'organizationAddressLine2',
        'organization_city': 'organizationCity',
        'organization_zip_post_code': 'organizationZipPostCode',
        'organization_state_province_county': 'organizationStateProvinceCounty',
        'organization_country': 'organizationCountry',
        'expiration_date': 'expirationDate',
        'organization_name': 'organizationName',
        'organization_person_name': 'organizationPersonName',
        'organization_email': 'organizationEmail',
        'organization_phone_number': 'organizationPhoneNumber',
        'name': 'name',
        'entity_attributes': 'entityAttributes',
        'scope_id': 'scopeId'
    }

    def __init__(self, organization_address_line1=None, organization_address_line2=None, organization_city=None, organization_zip_post_code=None, organization_state_province_county=None, organization_country=None, expiration_date=None, organization_name=None, organization_person_name=None, organization_email=None, organization_phone_number=None, name=None, entity_attributes=None, scope_id=None):  # noqa: E501
        """AccountCreator - a model defined in Swagger"""  # noqa: E501

        self._organization_address_line1 = None
        self._organization_address_line2 = None
        self._organization_city = None
        self._organization_zip_post_code = None
        self._organization_state_province_county = None
        self._organization_country = None
        self._expiration_date = None
        self._organization_name = None
        self._organization_person_name = None
        self._organization_email = None
        self._organization_phone_number = None
        self._name = None
        self._entity_attributes = None
        self._scope_id = None
        self.discriminator = None

        if organization_address_line1 is not None:
            self.organization_address_line1 = organization_address_line1
        if organization_address_line2 is not None:
            self.organization_address_line2 = organization_address_line2
        if organization_city is not None:
            self.organization_city = organization_city
        if organization_zip_post_code is not None:
            self.organization_zip_post_code = organization_zip_post_code
        if organization_state_province_county is not None:
            self.organization_state_province_county = organization_state_province_county
        if organization_country is not None:
            self.organization_country = organization_country
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if organization_name is not None:
            self.organization_name = organization_name
        if organization_person_name is not None:
            self.organization_person_name = organization_person_name
        if organization_email is not None:
            self.organization_email = organization_email
        if organization_phone_number is not None:
            self.organization_phone_number = organization_phone_number
        if name is not None:
            self.name = name
        if entity_attributes is not None:
            self.entity_attributes = entity_attributes
        if scope_id is not None:
            self.scope_id = scope_id

    @property
    def organization_address_line1(self):
        """Gets the organization_address_line1 of this AccountCreator.  # noqa: E501


        :return: The organization_address_line1 of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_address_line1

    @organization_address_line1.setter
    def organization_address_line1(self, organization_address_line1):
        """Sets the organization_address_line1 of this AccountCreator.


        :param organization_address_line1: The organization_address_line1 of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_address_line1 = organization_address_line1

    @property
    def organization_address_line2(self):
        """Gets the organization_address_line2 of this AccountCreator.  # noqa: E501


        :return: The organization_address_line2 of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_address_line2

    @organization_address_line2.setter
    def organization_address_line2(self, organization_address_line2):
        """Sets the organization_address_line2 of this AccountCreator.


        :param organization_address_line2: The organization_address_line2 of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_address_line2 = organization_address_line2

    @property
    def organization_city(self):
        """Gets the organization_city of this AccountCreator.  # noqa: E501


        :return: The organization_city of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_city

    @organization_city.setter
    def organization_city(self, organization_city):
        """Sets the organization_city of this AccountCreator.


        :param organization_city: The organization_city of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_city = organization_city

    @property
    def organization_zip_post_code(self):
        """Gets the organization_zip_post_code of this AccountCreator.  # noqa: E501


        :return: The organization_zip_post_code of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_zip_post_code

    @organization_zip_post_code.setter
    def organization_zip_post_code(self, organization_zip_post_code):
        """Sets the organization_zip_post_code of this AccountCreator.


        :param organization_zip_post_code: The organization_zip_post_code of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_zip_post_code = organization_zip_post_code

    @property
    def organization_state_province_county(self):
        """Gets the organization_state_province_county of this AccountCreator.  # noqa: E501


        :return: The organization_state_province_county of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_state_province_county

    @organization_state_province_county.setter
    def organization_state_province_county(self, organization_state_province_county):
        """Sets the organization_state_province_county of this AccountCreator.


        :param organization_state_province_county: The organization_state_province_county of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_state_province_county = organization_state_province_county

    @property
    def organization_country(self):
        """Gets the organization_country of this AccountCreator.  # noqa: E501


        :return: The organization_country of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_country

    @organization_country.setter
    def organization_country(self, organization_country):
        """Sets the organization_country of this AccountCreator.


        :param organization_country: The organization_country of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_country = organization_country

    @property
    def expiration_date(self):
        """Gets the expiration_date of this AccountCreator.  # noqa: E501


        :return: The expiration_date of this AccountCreator.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this AccountCreator.


        :param expiration_date: The expiration_date of this AccountCreator.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def organization_name(self):
        """Gets the organization_name of this AccountCreator.  # noqa: E501


        :return: The organization_name of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this AccountCreator.


        :param organization_name: The organization_name of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def organization_person_name(self):
        """Gets the organization_person_name of this AccountCreator.  # noqa: E501


        :return: The organization_person_name of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_person_name

    @organization_person_name.setter
    def organization_person_name(self, organization_person_name):
        """Sets the organization_person_name of this AccountCreator.


        :param organization_person_name: The organization_person_name of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_person_name = organization_person_name

    @property
    def organization_email(self):
        """Gets the organization_email of this AccountCreator.  # noqa: E501


        :return: The organization_email of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_email

    @organization_email.setter
    def organization_email(self, organization_email):
        """Sets the organization_email of this AccountCreator.


        :param organization_email: The organization_email of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_email = organization_email

    @property
    def organization_phone_number(self):
        """Gets the organization_phone_number of this AccountCreator.  # noqa: E501


        :return: The organization_phone_number of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._organization_phone_number

    @organization_phone_number.setter
    def organization_phone_number(self, organization_phone_number):
        """Sets the organization_phone_number of this AccountCreator.


        :param organization_phone_number: The organization_phone_number of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._organization_phone_number = organization_phone_number

    @property
    def name(self):
        """Gets the name of this AccountCreator.  # noqa: E501


        :return: The name of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountCreator.


        :param name: The name of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def entity_attributes(self):
        """Gets the entity_attributes of this AccountCreator.  # noqa: E501


        :return: The entity_attributes of this AccountCreator.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._entity_attributes

    @entity_attributes.setter
    def entity_attributes(self, entity_attributes):
        """Sets the entity_attributes of this AccountCreator.


        :param entity_attributes: The entity_attributes of this AccountCreator.  # noqa: E501
        :type: dict(str, str)
        """

        self._entity_attributes = entity_attributes

    @property
    def scope_id(self):
        """Gets the scope_id of this AccountCreator.  # noqa: E501


        :return: The scope_id of this AccountCreator.  # noqa: E501
        :rtype: str
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this AccountCreator.


        :param scope_id: The scope_id of this AccountCreator.  # noqa: E501
        :type: str
        """

        self._scope_id = scope_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCreator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCreator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

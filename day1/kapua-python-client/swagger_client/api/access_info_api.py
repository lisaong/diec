# coding: utf-8

"""
    Eclipse Kapua REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccessInfoApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def access_info_count(self, scope_id, body, **kwargs):  # noqa: E501
        """Counts the AccessInfos  # noqa: E501

        Counts the AccessInfos with the given AccessInfoQuery parameter returning the number of matching AccessInfos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_count(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param AccessInfoQuery body: The AccessInfoQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_count_with_http_info(scope_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_count_with_http_info(scope_id, body, **kwargs)  # noqa: E501
            return data

    def access_info_count_with_http_info(self, scope_id, body, **kwargs):  # noqa: E501
        """Counts the AccessInfos  # noqa: E501

        Counts the AccessInfos with the given AccessInfoQuery parameter returning the number of matching AccessInfos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_count_with_http_info(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param AccessInfoQuery body: The AccessInfoQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_count`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_info_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/_count', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_info_create(self, scope_id, body, **kwargs):  # noqa: E501
        """Creates a new AccessInfo  # noqa: E501

        Creates a new AccessInfo based on the information provided in AccessInfoCreator parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_create(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessInfo (required)
        :param AccessInfoCreator body: Provides the information for the new AccessInfo to be created (required)
        :return: AccessInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_create_with_http_info(scope_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_create_with_http_info(scope_id, body, **kwargs)  # noqa: E501
            return data

    def access_info_create_with_http_info(self, scope_id, body, **kwargs):  # noqa: E501
        """Creates a new AccessInfo  # noqa: E501

        Creates a new AccessInfo based on the information provided in AccessInfoCreator parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_create_with_http_info(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessInfo (required)
        :param AccessInfoCreator body: Provides the information for the new AccessInfo to be created (required)
        :return: AccessInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_info_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_info_delete(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Deletes an AccessInfo  # noqa: E501

        Deletes the AccessInfo specified by the accessInfoId path parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_delete(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessInfo (required)
        :param str access_info_id: The id of the AccessInfo to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_delete_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_delete_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
            return data

    def access_info_delete_with_http_info(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Deletes an AccessInfo  # noqa: E501

        Deletes the AccessInfo specified by the accessInfoId path parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_delete_with_http_info(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessInfo (required)
        :param str access_info_id: The id of the AccessInfo to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_delete`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_info_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_info_find(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Gets an AccessInfo  # noqa: E501

        Gets the AccessInfo specified by the accessInfoId path parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_find(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessInfo. (required)
        :param str access_info_id: The id of the requested AccessInfo (required)
        :return: AccessInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_find_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_find_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
            return data

    def access_info_find_with_http_info(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Gets an AccessInfo  # noqa: E501

        Gets the AccessInfo specified by the accessInfoId path parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_find_with_http_info(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessInfo. (required)
        :param str access_info_id: The id of the requested AccessInfo (required)
        :return: AccessInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_find`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_info_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_info_query(self, scope_id, body, **kwargs):  # noqa: E501
        """Queries the AccessInfos  # noqa: E501

        Queries the AccessInfos with the given AccessInfoQuery parameter returning all matching AccessInfos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_query(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results (required)
        :param AccessInfoQuery body: The AccessInfoQuery to use to filter results (required)
        :return: AccessInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_query_with_http_info(scope_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_query_with_http_info(scope_id, body, **kwargs)  # noqa: E501
            return data

    def access_info_query_with_http_info(self, scope_id, body, **kwargs):  # noqa: E501
        """Queries the AccessInfos  # noqa: E501

        Queries the AccessInfos with the given AccessInfoQuery parameter returning all matching AccessInfos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_query_with_http_info(scope_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results (required)
        :param AccessInfoQuery body: The AccessInfoQuery to use to filter results (required)
        :return: AccessInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_info_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/_query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_info_simple_query(self, scope_id, **kwargs):  # noqa: E501
        """Gets the AccessInfo list in the scope.  # noqa: E501

        Gets the AccessInfo list in the scope. The query parameter userId is optional and can be used to filter results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_simple_query(scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results (required)
        :param str user_id: The optional User id to filter results
        :param int offset: The result set offset
        :param int limit: The result set limit
        :return: AccessInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_info_simple_query_with_http_info(scope_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_info_simple_query_with_http_info(scope_id, **kwargs)  # noqa: E501
            return data

    def access_info_simple_query_with_http_info(self, scope_id, **kwargs):  # noqa: E501
        """Gets the AccessInfo list in the scope.  # noqa: E501

        Gets the AccessInfo list in the scope. The query parameter userId is optional and can be used to filter results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_info_simple_query_with_http_info(scope_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results (required)
        :param str user_id: The optional User id to filter results
        :param int offset: The result set offset
        :param int limit: The result set limit
        :return: AccessInfoListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'user_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_info_simple_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_info_simple_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('userId', params['user_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessInfoListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_count(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Counts the AccessPermissions  # noqa: E501

        Counts the AccessPermissions with the given AccessPermissionQuery parameter returning the number of matching AccessPermissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_count(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param str access_info_id: The AccessInfo id in which to count results. (required)
        :param AccessPermissionQuery body: The AccessPermissionQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_count_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_count_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_permission_count_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Counts the AccessPermissions  # noqa: E501

        Counts the AccessPermissions with the given AccessPermissionQuery parameter returning the number of matching AccessPermissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_count_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param str access_info_id: The AccessInfo id in which to count results. (required)
        :param AccessPermissionQuery body: The AccessPermissionQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_count`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_count`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_permission_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions/_count', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_create(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Create an AccessPermission  # noqa: E501

        Creates a new AccessPermission based on the information provided in AccessPermissionCreator parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_create(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessPermission (required)
        :param str access_info_id: The AccessInfo id in which to create the AccessPermission. (required)
        :param AccessPermissionCreator body: Provides the information for the new AccessPermission to be created (required)
        :return: AccessPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_create_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_create_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_permission_create_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Create an AccessPermission  # noqa: E501

        Creates a new AccessPermission based on the information provided in AccessPermissionCreator parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_create_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessPermission (required)
        :param str access_info_id: The AccessInfo id in which to create the AccessPermission. (required)
        :param AccessPermissionCreator body: Provides the information for the new AccessPermission to be created (required)
        :return: AccessPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_create`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_permission_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_delete(self, scope_id, access_info_id, access_permission_id, **kwargs):  # noqa: E501
        """Delete an AccessPermission  # noqa: E501

        Deletes the AccessPermission specified by the \"accessPermissionId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_delete(scope_id, access_info_id, access_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the AccessPermission to delete. (required)
        :param str access_info_id: Specifies the AccessInfo Id for the requested AccessPermission (required)
        :param str access_permission_id: The id of the AccessPermission to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_delete_with_http_info(scope_id, access_info_id, access_permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_delete_with_http_info(scope_id, access_info_id, access_permission_id, **kwargs)  # noqa: E501
            return data

    def access_permission_delete_with_http_info(self, scope_id, access_info_id, access_permission_id, **kwargs):  # noqa: E501
        """Delete an AccessPermission  # noqa: E501

        Deletes the AccessPermission specified by the \"accessPermissionId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_delete_with_http_info(scope_id, access_info_id, access_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the AccessPermission to delete. (required)
        :param str access_info_id: Specifies the AccessInfo Id for the requested AccessPermission (required)
        :param str access_permission_id: The id of the AccessPermission to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'access_permission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_delete`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_delete`")  # noqa: E501
        # verify the required parameter 'access_permission_id' is set
        if ('access_permission_id' not in params or
                params['access_permission_id'] is None):
            raise ValueError("Missing the required parameter `access_permission_id` when calling `access_permission_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501
        if 'access_permission_id' in params:
            path_params['accessPermissionId'] = params['access_permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_find(self, scope_id, access_info_id, access_permission_id, **kwargs):  # noqa: E501
        """Get an AccessPermission  # noqa: E501

        Returns the AccessPermission specified by the \"accessPermissionId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_find(scope_id, access_info_id, access_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessPermission. (required)
        :param str access_info_id: Specifies the AccessPermissionId for the requested AccessPermission (required)
        :param str access_permission_id: The id of the requested AccessPermission (required)
        :return: AccessPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_find_with_http_info(scope_id, access_info_id, access_permission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_find_with_http_info(scope_id, access_info_id, access_permission_id, **kwargs)  # noqa: E501
            return data

    def access_permission_find_with_http_info(self, scope_id, access_info_id, access_permission_id, **kwargs):  # noqa: E501
        """Get an AccessPermission  # noqa: E501

        Returns the AccessPermission specified by the \"accessPermissionId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_find_with_http_info(scope_id, access_info_id, access_permission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessPermission. (required)
        :param str access_info_id: Specifies the AccessPermissionId for the requested AccessPermission (required)
        :param str access_permission_id: The id of the requested AccessPermission (required)
        :return: AccessPermission
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'access_permission_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_find`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_find`")  # noqa: E501
        # verify the required parameter 'access_permission_id' is set
        if ('access_permission_id' not in params or
                params['access_permission_id'] is None):
            raise ValueError("Missing the required parameter `access_permission_id` when calling `access_permission_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501
        if 'access_permission_id' in params:
            path_params['accessPermissionId'] = params['access_permission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions/{accessPermissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessPermission',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_query(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Queries the AccessPermissions  # noqa: E501

        Queries the AccessPermissions with the given AccessPermissionQuery parameter returning all matching AccessPermissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_query(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The AccessInfo id in which to search results. (required)
        :param AccessPermissionQuery body: The AccessPermissionQuery to use to filter results. (required)
        :return: AccessPermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_query_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_query_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_permission_query_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Queries the AccessPermissions  # noqa: E501

        Queries the AccessPermissions with the given AccessPermissionQuery parameter returning all matching AccessPermissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_query_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The AccessInfo id in which to search results. (required)
        :param AccessPermissionQuery body: The AccessPermissionQuery to use to filter results. (required)
        :return: AccessPermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_query`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_permission_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions/_query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessPermissionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_permission_simple_query(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Gets the AccessPermission list in the scope  # noqa: E501

        Gets the AccessPermission list in the scope. The query parameter accessInfoId is optional and can be used to filter results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_simple_query(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The optional id to filter results. (required)
        :param int offset: The result set offset.
        :param int limit: The result set limit.
        :return: AccessPermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_permission_simple_query_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_permission_simple_query_with_http_info(scope_id, access_info_id, **kwargs)  # noqa: E501
            return data

    def access_permission_simple_query_with_http_info(self, scope_id, access_info_id, **kwargs):  # noqa: E501
        """Gets the AccessPermission list in the scope  # noqa: E501

        Gets the AccessPermission list in the scope. The query parameter accessInfoId is optional and can be used to filter results  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_permission_simple_query_with_http_info(scope_id, access_info_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The optional id to filter results. (required)
        :param int offset: The result set offset.
        :param int limit: The result set limit.
        :return: AccessPermissionListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_permission_simple_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_permission_simple_query`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_permission_simple_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessPermissionListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_count(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Counts the AccessRoles  # noqa: E501

        Counts the AccessRoles with the given AccessRoleQuery parameter returning the number of matching AccessRoles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_count(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param str access_info_id: The AccessInfo id in which to count results. (required)
        :param AccessRoleQuery body: The AccessRoleQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_count_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_count_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_role_count_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Counts the AccessRoles  # noqa: E501

        Counts the AccessRoles with the given AccessRoleQuery parameter returning the number of matching AccessRoles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_count_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to count results (required)
        :param str access_info_id: The AccessInfo id in which to count results. (required)
        :param AccessRoleQuery body: The AccessRoleQuery to use to filter count results (required)
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_count`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_count`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_role_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles/_count', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_create(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Create an AccessRole  # noqa: E501

        Creates a new AccessRole based on the information provided in AccessRoleCreator parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_create(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessRole (required)
        :param str access_info_id: The AccessInfo id in which to create the AccessRole. (required)
        :param AccessRoleCreator body: Provides the information for the new AccessRole to be created (required)
        :return: AccessRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_create_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_create_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_role_create_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Create an AccessRole  # noqa: E501

        Creates a new AccessRole based on the information provided in AccessRoleCreator parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_create_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to create the AccessRole (required)
        :param str access_info_id: The AccessInfo id in which to create the AccessRole. (required)
        :param AccessRoleCreator body: Provides the information for the new AccessRole to be created (required)
        :return: AccessRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_create`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_create`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_role_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_delete(self, scope_id, access_info_id, access_role_id, **kwargs):  # noqa: E501
        """Delete an AccessRole  # noqa: E501

        Deletes the AccessRole specified by the \"accessRoleId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_delete(scope_id, access_info_id, access_role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the AccessRole to delete. (required)
        :param str access_info_id: Specifies the AccessInfoId for the requested AccessPermission (required)
        :param str access_role_id: The id of the AccessRole to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_delete_with_http_info(scope_id, access_info_id, access_role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_delete_with_http_info(scope_id, access_info_id, access_role_id, **kwargs)  # noqa: E501
            return data

    def access_role_delete_with_http_info(self, scope_id, access_info_id, access_role_id, **kwargs):  # noqa: E501
        """Delete an AccessRole  # noqa: E501

        Deletes the AccessRole specified by the \"accessRoleId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_delete_with_http_info(scope_id, access_info_id, access_role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the AccessRole to delete. (required)
        :param str access_info_id: Specifies the AccessInfoId for the requested AccessPermission (required)
        :param str access_role_id: The id of the AccessRole to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'access_role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_delete`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_delete`")  # noqa: E501
        # verify the required parameter 'access_role_id' is set
        if ('access_role_id' not in params or
                params['access_role_id'] is None):
            raise ValueError("Missing the required parameter `access_role_id` when calling `access_role_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501
        if 'access_role_id' in params:
            path_params['accessRoleId'] = params['access_role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_find(self, scope_id, access_info_id, access_role_id, **kwargs):  # noqa: E501
        """Get an AccessRole  # noqa: E501

        Returns the AccessRole specified by the \"accessRoleId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_find(scope_id, access_info_id, access_role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessRole. (required)
        :param str access_info_id: Specifies the AccessRoleId for the requested AccessRole (required)
        :param str access_role_id: The id of the requested AccessRole (required)
        :return: AccessRole
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_find_with_http_info(scope_id, access_info_id, access_role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_find_with_http_info(scope_id, access_info_id, access_role_id, **kwargs)  # noqa: E501
            return data

    def access_role_find_with_http_info(self, scope_id, access_info_id, access_role_id, **kwargs):  # noqa: E501
        """Get an AccessRole  # noqa: E501

        Returns the AccessRole specified by the \"accessRoleId\" path parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_find_with_http_info(scope_id, access_info_id, access_role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId of the requested AccessRole. (required)
        :param str access_info_id: Specifies the AccessRoleId for the requested AccessRole (required)
        :param str access_role_id: The id of the requested AccessRole (required)
        :return: AccessRole
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'access_role_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_find`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_find`")  # noqa: E501
        # verify the required parameter 'access_role_id' is set
        if ('access_role_id' not in params or
                params['access_role_id'] is None):
            raise ValueError("Missing the required parameter `access_role_id` when calling `access_role_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501
        if 'access_role_id' in params:
            path_params['accessRoleId'] = params['access_role_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles/{accessRoleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessRole',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_query(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Queries the AccessRoles  # noqa: E501

        Queries the AccessRoles with the given AccessRoleQuery parameter returning all matching AccessRoles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_query(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The AccessInfo id in which to search results. (required)
        :param AccessRoleQuery body: The AccessRoleQuery to use to filter results. (required)
        :return: AccessRoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_query_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_query_with_http_info(scope_id, access_info_id, body, **kwargs)  # noqa: E501
            return data

    def access_role_query_with_http_info(self, scope_id, access_info_id, body, **kwargs):  # noqa: E501
        """Queries the AccessRoles  # noqa: E501

        Queries the AccessRoles with the given AccessRoleQuery parameter returning all matching AccessRoles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_query_with_http_info(scope_id, access_info_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The AccessInfo id in which to search results. (required)
        :param AccessRoleQuery body: The AccessRoleQuery to use to filter results. (required)
        :return: AccessRoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_query`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `access_role_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles/_query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessRoleListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def access_role_simple_query(self, scope_id, access_info_id, limit, **kwargs):  # noqa: E501
        """Gets the AccessRole list in the scope  # noqa: E501

        Returns the list of all the accessRoles associated to the current selected scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_simple_query(scope_id, access_info_id, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The optional id to filter results. (required)
        :param int limit: The result set limit. (required)
        :param int offset: The result set offset.
        :return: AccessRoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.access_role_simple_query_with_http_info(scope_id, access_info_id, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.access_role_simple_query_with_http_info(scope_id, access_info_id, limit, **kwargs)  # noqa: E501
            return data

    def access_role_simple_query_with_http_info(self, scope_id, access_info_id, limit, **kwargs):  # noqa: E501
        """Gets the AccessRole list in the scope  # noqa: E501

        Returns the list of all the accessRoles associated to the current selected scope.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.access_role_simple_query_with_http_info(scope_id, access_info_id, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str scope_id: The ScopeId in which to search results. (required)
        :param str access_info_id: The optional id to filter results. (required)
        :param int limit: The result set limit. (required)
        :param int offset: The result set offset.
        :return: AccessRoleListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scope_id', 'access_info_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method access_role_simple_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scope_id' is set
        if ('scope_id' not in params or
                params['scope_id'] is None):
            raise ValueError("Missing the required parameter `scope_id` when calling `access_role_simple_query`")  # noqa: E501
        # verify the required parameter 'access_info_id' is set
        if ('access_info_id' not in params or
                params['access_info_id'] is None):
            raise ValueError("Missing the required parameter `access_info_id` when calling `access_role_simple_query`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `access_role_simple_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scope_id' in params:
            path_params['scopeId'] = params['scope_id']  # noqa: E501
        if 'access_info_id' in params:
            path_params['accessInfoId'] = params['access_info_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['kapuaAccessToken']  # noqa: E501

        return self.api_client.call_api(
            '/{scopeId}/accessinfos/{accessInfoId}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessRoleListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
